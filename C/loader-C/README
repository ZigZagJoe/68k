This is the first true bootloader for my 68k board.
Internally, it is mostly asm, with only the s-record parsing being C code.

Its primary function is to write characters read via uart into RAM 
at an address, postincrement, and then echo them back to the sender.

The default address is 0x2000, to remain backwards compatible
with the "strapper" simple bootloader.

Bytes read while GPIO0 of the MFP is low are interpreted as a command byte.

Otherwise, the byte is written into memory at the current write address,
byteCount is incremented, and the qcrc value is updated.

** Commands **

BOOT 
    displays 0xBB, then jumps to the last address loaded in with SET ADDR (or 0x2000, if none)
    
RESET
    resets the address pointer to 0x2000 and resets qcrc value to default (0xDEADC0DE)
    user programs should watch for this command and re-enter bootloader if recv'd
    
QCRC
    returns the "QCRC" (uint32_t) of the bytes written since last RESET/SET ADDR
    qcrc = rol(qcrc ^ byte, 1)
    
SREC
    parses the bytes written at the last address set as a null-terminated S-RECORD
    can be used to write flash and/or bootloader, if the relevant flags have been set.
    can not be aborted once started, flags are cleared once completed. bootloader will
    be unresponsive while the s-record program is in progress.
    
SET ADDR
    sets the address pointer to a uint32_t read in over serial and clears qcrc
    sets the boot address to the same value, and clears byte count
    
DUMP       
    reads (length, uint32) bytes from current address and sends them over serial
    confirms length and address before beginning dump
    once the specified number of bytes have been read, the qcrc of the read bytes is sent
    can be aborted by sending RESET command a few times
    
INFLATE
    reads dest address from serial, then decompresses byteCount (global var) bytes from 
    last address set with SET ADDR, to destination address. 
    boot & write address are set to the destination address, qcrc and flags are cleared 
    byteCount is set to number of bytes inflated
    returns number of bytes inflated and qcrc of bytes
    
Additionally, there are 3 commands which simply set flags for the SREC command: 

SET FLASH
    allows a s-record to write to flash addresses
    
SET LOADER
    allows a s-record to write to the loader sector 
    set flash must also be set or write will fail
    
SET BINARY SREC
    specifies the s-record is in binary format rather than hexadecimal format
    everything after S[0-9] are binary bytes, rather than hex digit pairs
    improves write speeds by a factor of 4 - faster to upload, faster to program
    normal s-records can be translated into binary srecs by using srec2srb     


** Code structure / Boot sequence **

[reloc.s]
Show character on TIL311
Disable interrupts (may die here if user code jumped to loader...)
Reset MFP
Copy bootloader region into RAM at 0x1000
Jump to bootloader code in RAM

[loader.s]
Initialize UART
Check for bootable magic on second flash sector
If magic found: 
   wait up to a second for a reset command
   else boot from second flash sector
   
Reset address pointer and QCRC
Read byte
   execute command if GPIO0 = 0
   else write byte to address++
   
loop to read byte

if command == CMD_SREC
    call handle_srec [c_funcs.c]
        which then calls parseSREC [parse_srec.c] once to verify, and again to write
