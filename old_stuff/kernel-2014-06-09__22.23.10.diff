98d97
<   
103c102
< 	move.b #TASK_CREATE, %d0                   | create the main() task
---
> 	move.b #TASK_CREATE, %d0            | create the main() task
116c115
< 	move.b #2, (DDR)                    | set DDR so scheduler can blink LED
---
> 	ori.b #2, (DDR)                     | set DDR so scheduler can blink LED
121a121,122
>     illegal								| sanity check exception (should never reach)
>     
169a171,175
> 
> |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
> | find the next runnable task and run it
> _run_next_task:
>     move.l (_active_task), %a0          | first node
171c177,178
< 	jmp _run_next_task
---
> _next_node:
>     move.l 4(%a0), %a0                  | node = node->next
173,178c180,189
< | ensure the next task will not get less than its fair share of time due 
< | to the task before yielding. instead, cause the next automatic interrupt 
< | to be skipped. the swapped task then gets 10ms + yielding task remaining time
< _user_swap:
< 	move.b #1, (_user_yielded)
<     bra _swap_task
---
> _check_runnable:
> 	cmp.b #2, 3(%a0)					| is it in sleep?
> 	bne _run_task
> 		
> 	move.l (millis_counter), %d0
> 	
> 	cmp.l 8(%a0), %d0
> 	blt _next_node					    | not time for this process yet
> 	
> 	move.b #1, 3(%a0)                   | mark as runnable
201,228d211
<     
< |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
< | find the next runnable task and run it
< _run_next_task:
<     move.l (_active_task), %a2          | first node
< 	
< _next_node:
<     move.l 4(%a2), %a2                  | node = node->next
< 
< _check_runnable:
<     cmp.b #1, 3(%a2)                    | check sleep
< 	beq _got_runnable				    | no? runnable task!
< 	
< 	cmp.b #2, 3(%a2)
< 	bne _next_node
< 		
< _check_sleep:
< 	move.l (millis_counter), %d0
< 	
< 	cmp.l 8(%a2), %d0
< 	blt _next_node					    | not time for this process yet
< 	
< 	move.b #1, 3(%a2)                   | mark as runnable
< 	bra _got_runnable
< 	
< _got_runnable:
<     move.l %a2, %a0
<     bra _run_task	
229a213,219
> | ensure the next task will not get less than its fair share of time due 
> | to the task before yielding. instead, cause the next automatic interrupt 
> | to be skipped. the swapped task then gets 10ms + yielding task remaining time
> _user_swap:
> 	move.b #1, (_user_yielded)
>     bra _swap_task
>     
236,237c226
< 	clr.b 3(%a0)                        | mark task as exited
< 		
---
>     
240c229,231
< 	move.l (_active_task), %a2           | load start of linked list
---
>     clr.b 3(%a0)                        | mark task as exited	
> 	
> 	move.l (_active_task), %a2          | load start of linked list
276d266
< 	move.l %a0, -(%sp)
299c289,290
<    
---
>     move.b #1, (3, %a2)                 | mark as runnable
> 	         
301a293,294
>     cli								    | ensure list is not modified while we are working
>     
310c303
<     bra _cr_finalize
---
>     bra _cr_finished
315,320c308
< 	
< _cr_finalize:
< 	| mark as runnable
< 	| do this absolutely last as we are in an invalid state prior to this point
< 	move.b #1, (3,%a2)                  
<       
---
> 	 
321a310,311
> 	sei
> 	
324d313
< 	move.l (%sp)+,%a0
